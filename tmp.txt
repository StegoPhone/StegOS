//create encoder and set settings and info (optional)
        lodepng::State state;
        //generate palette
        for(int i = 0; i < 16; i++) {
          unsigned char r = 127 * (1 + std::sin(5 * i * 6.28318531 / 16));
          unsigned char g = 127 * (1 + std::sin(2 * i * 6.28318531 / 16));
          unsigned char b = 127 * (1 + std::sin(3 * i * 6.28318531 / 16));
          unsigned char a = 63 * (1 + std::sin(8 * i * 6.28318531 / 16)) + 128; /*alpha channel of the palette (tRNS chunk)*/

          //palette must be added both to input and output color mode, because in this
          //sample both the raw image and the expected PNG image use that palette.
          lodepng_palette_add(&state.info_png.color, r, g, b, a);
          lodepng_palette_add(&state.info_raw, r, g, b, a);
        }
        //both the raw image and the encoded image must get colorType 3 (palette)
        state.info_png.color.colortype = LCT_PALETTE; //if you comment this line, and create the above palette in info_raw instead, then you get the same image in a RGBA PNG.
        state.info_png.color.bitdepth = 4;
        state.info_raw.colortype = LCT_PALETTE;
        state.info_raw.bitdepth = 4;
        state.encoder.auto_convert = 0; //we specify ourselves exactly what output PNG color mode we want

        char bytesStr[50];
        snprintf(bytesStr, sizeof(bytesStr), "Encoding %" PRIu64 " bytes", fileSize);
        display.drawStr(0,60,bytesStr);
        display.sendBuffer();

        //encode
        unsigned error = lodepng::encode(logoEncoded, pngBytes, 256, 64, state);
        display.clearBuffer();
        display.drawStr(0,10,"StegoPhone / StegOS");

        if(error) {
          display.drawStr(0,60,lodepng_error_text(error));
          display.sendBuffer();
          ConsoleSerial.println("encoder error");
          ConsoleSerial.println(error);
          ConsoleSerial.println(lodepng_error_text(error));
        } else {
          haveLogo = true;
        }